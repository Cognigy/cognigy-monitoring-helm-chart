{{- $targetNamespace := .Values.appNamespacesTarget }}
{{- if .Values.rules.vg.enabled -}}
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: {{ .Release.Name }}-cognigy-vg-rules
  labels:
    {{- include "cognigy-monitors.labels" . | nindent 4 }}
spec:
  groups:
    # General rules
    - name: cognigy.vg.alert.general
      rules:
      - alert: PodRestarts
        expr: (kube_pod_container_status_restarts_total{container=~"api-server|drachtio|feature-server|freeswitch|influxdb|mysql|postgres|redis|sbc-inbound|sbc-outbound|sbc-call-router|sbc-rtp|rtp-engine-sidecar|sbc-sip|sbc-sip-sidecar|test-call-manager|webapp"} -  kube_pod_container_status_restarts_total{container=~"api-server|drachtio|feature-server|freeswitch|influxdb|mysql|postgres|redis|sbc-inbound|sbc-outbound|sbc-call-router|sbc-rtp|rtp-engine-sidecar|sbc-sip|sbc-sip-sidecar|test-call-manager|webapp"} offset 5m) > 0
        for: 0m
        labels:
          severity: warning
          group: vg-custom-alert-rules
        annotations:
          summary: Pod {{`{{`}} $labels.namespace {{`}}`}}/{{`{{`}} $labels.pod {{`}}`}} has restarted
          description: "Pod {{`{{`}} $labels.container }} restarted on {{`{{`}} $labels.instance }}). \n  VALUE = {{`{{`}} $value }}\n  LABELS = {{`{{`}} $labels }}"
      {{- if (.Values.rules.vg.cpuThrottlingVGServiceHigh.enabled ) }}
      - alert: CPUThrottlingVGServiceHigh
        annotations:
          description: '{{`{{`}} $value | humanizePercentage {{`}}`}} throttling of CPU in namespace {{`{{`}} $labels.namespace {{`}}`}} for container {{`{{`}} $labels.container {{`}}`}} in pod {{`{{`}} $labels.pod {{`}}`}}.'
          runbook_url: {{ .Values.runbookUrl }}alert-name-cputhrottlinghigh
          summary: Processes experience elevated CPU throttling.
        expr: |-
          sum(increase(container_cpu_cfs_throttled_periods_total{container!="metrics", pod=~"feature-server.*|sbc-sip.*|sbc-rtp.*"}[5m])) by (container, pod, namespace)
            /
          sum(increase(container_cpu_cfs_periods_total{}[5m])) by (container, pod, namespace)
            > ( 25 / 100 )
        for: {{ .Values.rules.vg.cpuThrottlingVGServiceHigh.timeout }}
        labels:
          severity: {{ .Values.rules.vg.cpuThrottlingVGServiceHigh.severity }}
      {{- end }}
      {{- if (.Values.rules.vg.kubeVgPodNotReady.enabled ) }}
      - alert: KubeVGPodNotReady
        annotations:
          description: Pod {{`{{`}} $labels.namespace {{`}}`}}/{{`{{`}} $labels.pod {{`}}`}} for selected services has been in a non-ready state for more than 5 minutes.
          runbook_url: {{ .Values.runbookUrl }}alert-name-kubepodnotready-selected
          summary: Pod for sbc-sip, sbc-rtp, feature-server, sbc-inbound, sbc-outbound pod has been in a non-ready state for more than 5 minutes.
        expr: |
          sum by (namespace, pod) (
            max by(namespace, pod) (
              kube_pod_status_phase{job="kube-state-metrics", namespace=~"{{ $targetNamespace }}", phase=~"Pending|Unknown"}
            ) * on(namespace, pod) group_left(owner_kind) topk by(namespace, pod) (
              1, max by(namespace, pod) (kube_pod_owner{pod=~"^sbc-inbound.*|^sbc-outbound.*|^sbc-sip.*|^sbc-rtp.*|^feature-server.*"})
            )
          ) > 0
        for: {{ .Values.rules.vg.kubeVgPodNotReady.timeout }}
        labels:
          severity: {{ .Values.rules.vg.kubeVgPodNotReady.severity }}
      {{- end }}
    # feature-server rules
    {{- if (.Values.rules.vg.featureServer.enabled ) }}
    - name: cognigy.vg.alert.feature-server
      rules:
      {{- if (.Values.rules.vg.featureServer.uncaughtErrors.enabled ) }}
      - alert: UncaughtErrorsFeatureServer
        expr: sum(increase(vg_feature_server_uncaught_error_total[5m])) > {{$.Values.rules.vg.featureServer.uncaughtErrors.threshold }}
        for: 5m
        labels:
          severity: warning
          group: vg-custom-alert-rules
        annotations:
          summary: feature-server had uncaught errors on (instance {{`{{`}} $labels.instance }})
          description: "feature-server had uncaught errors: \n  VALUE = {{`{{`}} $value }}\n  LABELS = {{`{{`}} $labels }}"
      {{- end }}

      {{- if (.Values.rules.vg.featureServer.taskErrors.enabled ) }}
      - alert: TaskErrorsFeatureServer
        expr: sum(increase(vg_feature_server_task_error[5m])) by (task) > {{$.Values.rules.vg.featureServer.taskErrors.threshold }}
        for: 0m
        labels:
          severity: critical
          group: vg-custom-alert-rules
        annotations:
          summary: "Task: Error/min rate is high (instance {{`{{`}} $labels.instance }})"
          description: "Task: Error/min rate has crossed {{$.Values.rules.vg.threshold }} threshold: \n  VALUE = {{`{{`}} $value }}\n  LABELS = {{`{{`}} $labels }}"
      {{- end }}

      {{- if (.Values.rules.vg.featureServer.handoverErrors.enabled ) }}
      - alert: HandoverErrorsFeatureServer
        expr: sum(increase(vg_feature_server_handover_error_total{status!~"busy|no-answer"}[5m])) >  {{$.Values.rules.vg.featureServer.handoverErrors.threshold }}
        for: 0m
        labels:
          severity: warning
          group: vg-custom-alert-rules
        annotations:
          summary: feature-server had handover errors (instance {{`{{`}} $labels.instance }})
          description: "feature-server had handover errors: \n  VALUE = {{`{{`}} $value }}\n  LABELS = {{`{{`}} $labels }}"
      {{- end }}
    {{- end }}
{{- end -}}